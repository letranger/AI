:PROPERTIES:
:ID:       6ae7fb7a-0b38-4448-b19f-073d262513f2
:ROAM_ALIASES: 迴歸
:END:

#+TITLE: Regression
# -*- org-export-babel-evaluate: nil -*-
#+TAGS: AI
#+OPTIONS: toc:2 ^:nil num:5
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/muse.css" />
#+EXCLUDE_TAGS: noexport
#+latex:\newpage


即，根據一組預測特徵（predictor，如里程數、車齡、品牌）來預測目標數值（如二手車車價）[fn:1]，這個目標數值也是label。

有些迴歸演算法也可以用來分類，例如Logistic，它可以輸出一個數值，以這個數值來表示對應到特定類別的機率，例如，某封email為垃圾郵件的機率為20%、某張圖片為狗的機率為70%。

迴歸問題可再細分為兩類：
- Linear regression:
  * 假設輸入變量(x)與單一輸出變量(y)間存在線性關係，並以此建立模型。
  * 優點: 簡單、容易解釋
  * 缺點: 輸入與輸出變量關係為線性時會導致低度擬合
  * 例: 身高與體重間的關係
- Logistic regression
  * 也是線性方法，但使用logist function轉換輸出的預測結果，其輸出結果為類別機率(class probabilities)
  * 優點: 簡單、容易解釋
  * 缺點: 輸入與輸出變量關係為線性時無法處理分類問題

典型迴歸案例: Boston Housing Data

* 迴歸原理
** Step 1
1. Model: $y = w*x+b$
2. Data: 找一堆現成的資料
** Step 2: Goodness of Function
1. Training Data
2. Loss function L: 越小越好
   input: a function / output: how bad it is
3. Pick the "Best: Function
   $f* = arg min L(f)$
   上述可以微分來求最佳解，即求 function L 的最小值
4. 數值最佳解: Gradient Descent(找拋物面最低點)
** 迴歸實作
[[https://tree.rocks/deep-learning-from-scratch-by-linear-regression-e42f5dcdb024][手刻 Deep Learning — 第零章 — 線性回歸]]
原始資料:
#+CAPTION: Caption
#+LABEL:fig:Labl
#+name: fig:Name
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 500
[[file:images/Xyh-1.png]]

#+begin_src python -r -n :results output :exports both
import numpy as np
import matplotlib.pyplot as plt

def gen_data(X, a, b):
    return X * a + b


## 重新產生X, y，較合理，而非已存在一條線
X = np.array(range(1, 10))
y = np.array([27, 35, 40, 50, 66, 60, 76, 88, 90])
#y = gen_data(X, a=8, b=20)

plt.scatter(X, y, color='black')
plt.plot(X, 1 * X + 1)
plt.plot(X, 4 * X + 10)
plt.plot(X, 4 * X + 10)
plt.plot(X, 8 * X + 30)
plt.ylim(0, 121)
plt.legend(['Raw Data', 'Line 1', 'Line 2', 'Line 3'])
plt.savefig("images/Xyh-1.png", dpi=300)

a = 1
b = 1
yh = a * X + b #y hat


plt.plot(X, yh)
#plt.savefig("images/Xyh.png", dpi=300)

def loss_func(y_true, y_predict):
    return y_true - y_predict

def optimizer(d, loss):
    return np.mean(d * loss * 0.01)

N = 1000
for i in range(N):
    p_y = a * X + b
    loss = loss_func(y, p_y)
    a -= optimizer(-2 * X, loss)
    b -= optimizer(-2, loss)
    if i % int(N/10) == 0:
        print('誤差: {:.2f}'.format(np.mean(loss)), '目前 a: {:.2f}, b: {:.2f}'.format(a, b))

yh = a * X + b #y hat
#plt.plot(X, yh)
#plt.legend(['Target', 'Initialization', 'Optimization'])
#plt.savefig("images/Xyh.png", dpi=300)
#+end_src

#+RESULTS:
#+begin_example
[[1]
 [2]
 [3]
 [4]
 [5]
 [6]
 [7]
 [8]
 [9]]
誤差: 53.11 目前 a: 7.27, b: 2.06
誤差: 2.11 目前 a: 9.84, b: 7.81
誤差: 1.40 目前 a: 9.29, b: 11.26
誤差: 0.93 目前 a: 8.93, b: 13.54
誤差: 0.61 目前 a: 8.69, b: 15.05
誤差: 0.41 目前 a: 8.53, b: 16.06
誤差: 0.27 目前 a: 8.42, b: 16.72
誤差: 0.18 目前 a: 8.35, b: 17.16
誤差: 0.12 目前 a: 8.31, b: 17.45
誤差: 0.08 目前 a: 8.28, b: 17.65
#+end_example


#+CAPTION: Caption
#+LABEL:fig:Labl
#+name: fig:Name
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 500
[[file:images/Xyh.png]]

開始 Linear Regression (線性回歸)

練習投藍的時後，我們需要知道籃筐位置，誤差多少，做出丟球的修正；做 Machine Learning 也是一樣道理，我們需要 :
1. 找出誤差
2. 做出修正

所以我們這邊帶入兩個觀念:
1. loss function (誤差計算，找出誤差)
2. optimizer (最佳化方法，做出修正)

我們用程式碼來看
loss function: 其中 loss_func 的 y_true 表示商店的真實價格，y_predict 是我們預測的價格，我們這邊採用 真實價格 減去 預測價格，就是預測的誤差
#+begin_src python -r -n :results output :exports both
def loss_func(y_true, y_predict):
    return y_true - y_predict
#+end_src
optimizer: 這邊有個參數叫做 d ，其實他是 partial derivative ，這是微積分的概念。optimizer的修正並非最佳，可以自行修正找出最佳參數
#+begin_src python -r -n :results output :exports both
def optimizer(d, loss):
    return np.mean(d * loss * 0.01)
#+end_src

上面就是我們的訓練用程式碼，跑 1000 次訓練，每 100 次 ( N/10 ) 我們印出一次誤差讓我們看看過程
其中：
a -= optimizer(-2 * X, loss)
b -= optimizer(-2, loss)
這邊就是每次的訓練我們都在調整 a 與 b，就像是我們投籃丟歪球了，每次練習都在調整力道

各位可以試看看將 a 與 b 改成任意數值 ( 不要太過極端以免 overflow )，在這個訓練過程中，不管 a, b 初始是多少，都會逐漸往我們正確答案靠近，為什麼會這樣呢？

    這就是微積分的力量

大多的 Machine Learning 也是類似這種方法，不停的 Training ( 訓練 ) 找到答案，微積分這部分日後有空再來解說 XD

微分: https://tree.rocks/deep-learning-from-scratch-introduce-differential-91f5b4400d1a

** sklear版solution
#+begin_src python -r -n :results output :exports both
import numpy as np
X = np.arange(1, 10).reshape(-1, 1) #轉換矩陣形狀以符合sklearn要求
y = [27, 35, 40, 50, 66, 60, 76, 88, 90]

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X, y)

print('Slope:', model.coef_)
print('Intercept:', model.intercept_)
#+end_src

#+RESULTS:
: Slope: [8.21666667]
: Intercept: 18.02777777777777

* 簡單線性迴歸
** Pizza
Let's assume that you have recorded the diameters and prices of pizzas that you have previously eaten in your pizza journal. These observations comprise our training data:
|--------------------+------------------|
| Diameter in inches | Price in dollars |
|--------------------+------------------|
|                  6 |                7 |
|                  8 |                9 |
|                 10 |               13 |
|                 14 |             17.5 |
|                 18 |               18 |
|--------------------+------------------|
*** 觀察數據
We can visualize our training data by plotting it on a graph using matplotlib:
#+begin_src python -r -n :results output :exports both
import numpy as np
# "np" and "plt" are common aliases for NumPy and Matplotlib, respectively.
import matplotlib.pyplot as plt

# X represents the features of our training data, the diameters of the pizzas.
# A scikit–learn convention is to name the matrix of feature vectors X.
# Uppercase letters indicate matrices, and lowercase letters indicate vectors.
X = np.array([[6], [8], [10], [14], [18]]).reshape(-1, 1)

y = [7, 9, 13, 17.5 , 18]
# y is a vector representing the prices of the pizzas.

#plt.figure()
plt.title('Pizza price plotted against diameter')
plt.xlabel('Diameter in inches')
plt.ylabel('Price in dollars')
plt.plot(X, y, 'k.')
plt.axis([0, 25, 0, 25])
plt.grid(True)
plt.savefig('images/pizza-1.png', dpi=300)
#+end_src

#+RESULTS:
#+CAPTION: Pizza Regression #1
#+LABEL:fig:Pizza-Reg-1
#+name: fig:Pizza-Reg-1
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 500
[[file:images/pizza-1.png]]
We can see from the plot of the training data that there is a positive relationship between the diameter of a pizza and its price, which should be corroborated by our own pizza-eating experience.
*** 建模: LinearRegression
The following pizza price predictor program models this relationship using simple linear regression.
#+begin_src python -r -n :results output :exports both
import numpy as np
X = np.array([[6], [8], [10], [14], [18]]).reshape(-1, 1)
y = [7, 9, 13, 17.5 , 18]

print(X.shape)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
# Create an instance of the estimator
model.fit(X, y)
# Fit the model on the training data

# Predict the price of a pizza with a diameter that has never been seen before
test_pizza = np.array([[12]])
predicted_price = model.predict(test_pizza)[0]
print('A 12" pizza should cost: $%.2f' % predicted_price)
#+end_src

#+RESULTS:
: (5, 1)
: A 12" pizza should cost: $13.68

- The LinearRegression class is an *estimator*. Estimators predict a value based on observed data.
- In scikit-learn, all estimators implement the fit methods and predict.
- The fit method of LinearRegression learns the parameters of the following model for simple linear regression:$$y=\alpha+\beta x$$
- $y$ is the predicted value of the response variable; in this example, it is the predicted price of the pizza.
- $x$ is the explanatory variable.
- The intercept term $\alpha$ and the coefficient $\beta$ are parameters of the model that are learned by the learning algorithm.
- The hyperplane plotted in the following figure models the relationship between the size of a pizza and its price.
- Using training data to learn the values of the parameters for simple linear regression that produce the best fitting model is called ordinary least squares (OLS) or linear least squares.

#+begin_src python -r -n :results output :exports both
import numpy as np
X = np.array([[6], [8], [10], [14], [18]]).reshape(-1, 1)
y = [7, 9, 13, 17.5 , 18]

from sklearn.linear_model import LinearRegression
model = LinearRegression()
# Create an instance of the estimator
model.fit(X, y)
# Fit the model on the training data

from matplotlib import pyplot as plt
plt.scatter(X, y, color = 'k')
plt.plot(X, model.predict(X), color='g')
plt.title('Pizza price plotted against diameter')
plt.xlabel('Diameter in inches')
plt.ylabel('Price in dollars')
plt.savefig('images/pizza-2.png', dpi=300)
#+end_src

  #+RESULTS:

#+CAPTION: Pizza regression 2
#+LABEL:fig:Pizza-reg-2
#+name: fig:Pizza-reg-2
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 500
[[file:images/pizza-2.png]]
*** Evaluating the fitness of the model with a cost function
Regression lines produced by several sets of parameter values are plotted in the following figure. How can we assess which parameters produced the best-fitting regression line?
#+begin_src python -r -n :results output :exports both
import numpy as np
X = np.array([[6], [8], [10], [14], [18]]).reshape(-1, 1)
y = [7, 9, 13, 17.5 , 18]

from sklearn.linear_model import LinearRegression
model = LinearRegression()
# Create an instance of the estimator
model.fit(X, y)
# Fit the model on the training data

from matplotlib import pyplot as plt
plt.scatter(X, y, color = 'k')
plt.plot(X, model.predict(X), color='g')
plt.plot(X, model.predict(X)+.5, color='c', linestyle='--')
plt.plot(X, model.predict(X)*.9, color='m', linestyle='-.')
plt.title('Pizza price plotted against diameter')
plt.xlabel('Diameter in inches')
plt.ylabel('Price in dollars')
plt.savefig('images/pizza-3.png', dpi=300)

#+end_src

#+RESULTS:

#+CAPTION: Pizza regression 3
#+LABEL:fig:Pizza-reg-3
#+name: fig:Pizza-reg-3
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 500
[[file:images/pizza-3.png]]
**** cost function
A cost function, also called a loss function, is used to define and measure the error of a model. The differences between the prices predicted by the model and the observed prices of the pizzas in the training set are called residuals, or training errors. The differences between the predicted and observed values in the test data are called prediction errors, or test errors.
#+begin_src python -r -n :results output :exports both
import numpy as np
X = np.array([[6], [8], [10], [14], [18]]).reshape(-1, 1)
y = [7, 9, 13, 17.5 , 18]

from sklearn.linear_model import LinearRegression
model = LinearRegression()
# Create an instance of the estimator
model.fit(X, y)
# Fit the model on the training data

from matplotlib import pyplot as plt

dy = (model.predict(X)-y)/2
for x, y1, y2 in zip(X, y, model.predict(X)):
    xs = [x, x]
    ys = [y1, y2]
    plt.plot(xs, ys, color='orange')
plt.scatter(X, y, color = 'k')
plt.plot(X, model.predict(X), color='g')
#plt.errorbar(X, model.predict(X)-dy, yerr=dy, fmt='.')
plt.title('Pizza price plotted against diameter')
plt.xlabel('Diameter in inches')
plt.ylabel('Price in dollars')
plt.savefig('images/pizza-4.png', dpi=300)
#+end_src
#+RESULTS:
#+CAPTION: Pizza regression 4
#+LABEL:fig:Pizza-reg-4
#+name: fig:Pizza-reg-4
#+ATTR_LATEX: :width 300
#+ATTR_ORG: :width 300
#+ATTR_HTML: :width 500
[[file:images/pizza-4.png]]
This measure of the model's fitness is called the residual sum of squares (RSS) cost function. Formally, this function assesses the fitness of a model by summing the squared residuals for all of our training examples. The RSS is calculated with the formula in the following equation, where \(y_i\) is the observed value and \(f(x_i\) is the predicted value:$$SS_{res}=\sum_{i=1}^{n}(y_i-f(x_i))^2$$



#+begin_src emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(setq python-shell-interpreter "/usr/bin/python3")
(setq python-shell-interpreter-arg "-i")
(setq py-use-current-dir-when-execute-p t)
(setq python-shell-prompt-detect-enabled nil)
(setq python-shell-interpreter "ipython")
(setq python-shell-interpreter-interactive-args "-i --simple-prompt")
#+end_src

#+RESULTS:
: -i --simple-prompt


#+begin_src emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+end_src

#+RESULTS:
: ((gnu . https://elpa.gnu.org/packages/) (melpa . https://melpa.org/packages/) (org . https://orgmode.org/elpa/))

#+begin_src jupyter-python :session py :async yes :kernel python :results scalar both raw drawer :display text/html :exports both
import numpy as np
import pandas as pd

a = 3
print(a)
data = [[1,2], [3,4]]
pd.DataFrame(data, columns=["Foo", "Bar"])
#+end_src

#+RESULTS:
:results:
# Out[5]:
#+BEGIN_EXAMPLE
  Foo  Bar
  0    1    2
  1    3    4
#+END_EXAMPLE
:end:

#+begin_src jupyter-python :session py :async yes :kernel python3 :results scalar both raw drawer :exports both
from ipywidgets import  interact, interactive, fixed, interact_manual
import ipywidgets as widgets
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
print(data)
def f(x):
    plt.plot(np.arange(0, 10), x*np.arange(0, 10))
    plt.ylim(-30, 30)
#interact(f, x=10)
f(10)
#+end_src

#+RESULTS:
:results:
# Out[6]:
[[file:.ob-ipython-resrcnqInND.png]]
:end:

:end:
:end:
:end:

#+BEGIN_SRC emacs-lisp
(require 'jupyter)
#+END_SRC

#+RESULTS:
: jupyter

* BOOK
- Title: Mastering Machine Learning with scikit-learn
- Author: Gavin Hackeling

* Footnotes

[fn:1] Hands-On Machine Learning with Scikit-Learn: Aurelien Geron
